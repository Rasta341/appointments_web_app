import asyncio
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiohttp import web
import aiohttp

from database.db import user_repo, appointment_repo
from logger.bot_logger import get_logger
from config import load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = load_config("token")
WEBAPP_URL = load_config("WEBAPP_URL")  # URL –≤–∞—à–µ–≥–æ WebApp
API_URL = load_config("API_URL")  # URL –≤–∞—à–µ–≥–æ API


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = get_logger("bot")

user_repo = user_repo
appointment_repo = appointment_repo
admin_chat_id = load_config("admin_id")
async def check_is_admin(telegram_id) -> bool:
    return int(telegram_id) == int(admin_chat_id)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å WebApp –∫–Ω–æ–ø–∫–æ–π
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user

    if await check_is_admin(user.id):
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å", callback_data="admin_appointents")]])
        await message.answer(text="""
        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å—å - –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
        """,reply_markup=admin_keyboard)
        return

    try:
        user_created = await user_repo.create_user(telegram_id=user.id, username=user.username, first_name=user.first_name, last_name=user.last_name)
        logger.info(user_created)
    except Exception as e:
        logger.error(e)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä/–ø–µ–¥–∏–∫—é—Ä",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )],
        [InlineKeyboardButton(
            text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
            callback_data="my_appointments"
        )]
    ])

    await message.answer(
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é –∫—Ä–∞—Å–æ—Ç—ã!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:\n"
        "‚Ä¢ üíÖ –ú–∞–Ω–∏–∫—é—Ä\n"
        "‚Ä¢ ü¶∂ –ü–µ–¥–∏–∫—é—Ä\n"
        "‚Ä¢ ‚ú® –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —É—Ö–æ–¥\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "admin_appointents")
async def admin_appointments_handler(callback_query: types.CallbackQuery):
    try:
        appointments = await appointment_repo.admin_get_pending_and_confirmed_appointments_list()
        if not appointments:
            await callback_query.message.edit_text(
                "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
                "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
            )
            return

        text = ("üìã –ó–∞–ø–∏—Å–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n"
                "‚úÖ - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏,\n"
                "‚ùå - –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n")
        keyboard_buttons = []

        for apt in appointments:
            service_names = {
                'manicure': 'üíÖ –ú–∞–Ω–∏–∫—é—Ä',
                'pedicure': 'ü¶∂ –ü–µ–¥–∏–∫—é—Ä',
                'both': '‚ú® –ú–∞–Ω–∏–∫—é—Ä + –ü–µ–¥–∏–∫—é—Ä'
            }
            user = await user_repo.get_user(apt['telegram_id'])

            status_emoji = {
                'pending': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
            }
            date = datetime.strptime(apt['appointment_date'], '%Y-%m-%d').strftime('%d.%m.%Y')

            text += f"{apt['id']}.@{user['username']}, {service_names.get(apt['service_type'], apt['service_type'])}\n"
            text += f"üìÖ {date} –≤ {apt['appointment_time']}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {status_emoji.get(apt['status'], '‚è≥')}\n\n"

            match apt['status']:
                case 'pending':
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ùå: {apt['id']}",
                            callback_data=f"cancel_admin_{apt['id']}"
                        ),
                        InlineKeyboardButton(
                            text=f"‚úÖ: {apt['id']}",
                            callback_data=f"approve_{apt['id']}"
                        )
                    ])
                case 'confirmed':
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ùå: {apt['id']}",
                            callback_data=f"cancel_admin_{apt['id']}"
                        )
                    ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.error(e)


# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == "my_appointments")
async def show_appointments(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/appointments/{telegram_id}") as response:
                if response.status == 200:
                    appointments = await response.json()

                    if not appointments:
                        await callback_query.message.edit_text(
                            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
                            "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
                        )
                        return

                    text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
                    keyboard_buttons = []

                    for apt in appointments:
                        service_names = {
                            'manicure': 'üíÖ –ú–∞–Ω–∏–∫—é—Ä',
                            'pedicure': 'ü¶∂ –ü–µ–¥–∏–∫—é—Ä',
                            'both': '‚ú® –ú–∞–Ω–∏–∫—é—Ä + –ü–µ–¥–∏–∫—é—Ä'
                        }

                        status_emoji = {
                            'pending': '‚è≥',
                            'confirmed': '‚úÖ',
                            'cancelled': '‚ùå'
                        }

                        date = datetime.strptime(apt['appointment_date'], '%Y-%m-%d').strftime('%d.%m.%Y')

                        text += f"{apt['id']}. {status_emoji.get(apt['status'], '‚è≥')} {service_names.get(apt['service_type'], apt['service_type'])}\n"
                        text += f"üìÖ {date} –≤ {apt['appointment_time']}\n"
                        text += f"–°—Ç–∞—Ç—É—Å: {apt['status']}\n\n"

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                        if apt['status'] in ['pending', 'confirmed']:
                            keyboard_buttons.append([
                                InlineKeyboardButton(
                                    text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: {apt['id']}",
                                    callback_data=f"cancel_{apt['id']}"
                                )
                            ])

                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ",
                            web_app=WebAppInfo(url=WEBAPP_URL)
                        )
                    ])

                    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

                    await callback_query.message.edit_text(text, reply_markup=keyboard)
                else:
                    await callback_query.message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data.startswith("cancel_"))
async def cancel_appointment(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split("_")

    if "admin" in data_parts:
        appointment_id = int(data_parts[2])
        appointment = await appointment_repo.get_appointment_by_id(appointment_id=appointment_id)
        telegram_id = appointment['telegram_id']
        logger.info(f"app_id: {appointment_id}\n appid_type: {type(appointment_id)}")
        result = await appointment_repo.cancel_appointment(appointment_id=appointment_id, telegram_id=telegram_id)

        await send_message_to(user_id=telegram_id, text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—å")
        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")

        if not result:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏")

    else:
        appointment_id = int(data_parts[1])
        telegram_id = callback_query.from_user.id
        try:
            async with aiohttp.ClientSession() as session:
                async with session.delete(
                        f"{API_URL}/appointments/{appointment_id}",
                        params={"telegram_id": telegram_id}
                ) as response:
                    if response.status == 200:
                        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
                        await show_appointments(callback_query)
                    else:
                        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(lambda c: c.data.startswith("approve_"))
async def admin_approve_appointment(callback_query: types.CallbackQuery):
    appointment_id = int(callback_query.data.split("_")[1])

    user_id = await appointment_repo.admin_confirm_appointment(appointment_id)
    if user_id:
        await send_message_to(user_id=user_id,text="–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∂–¥–µ–º –í–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è :)" )
        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        await admin_appointments_handler(callback_query)
    else:
        logger.error("–û—à–∏–±–∫–∞ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
        await send_message_to(user_id=user_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é!!!")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
@dp.message(lambda message: message.web_app_data)
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)

        if data.get('action') == 'booking_confirmed':
            service_names = {
                'manicure': 'üíÖ –ú–∞–Ω–∏–∫—é—Ä',
                'pedicure': 'ü¶∂ –ü–µ–¥–∏–∫—é—Ä',
                'both': '‚ú® –ú–∞–Ω–∏–∫—é—Ä + –ü–µ–¥–∏–∫—é—Ä'
            }

            date = datetime.strptime(data['appointment_date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            service = service_names.get(data['service_type'], data['service_type'])

            confirmation_text = (
                f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"üéØ –£—Å–ª—É–≥–∞: {service}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {data['appointment_time']}\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: {data['appointment_id']}\n\n"
                f"üìç –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏!\n"
                f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏",
                    callback_data="my_appointments"
                )],
                [InlineKeyboardButton(
                    text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )]
            ])

            await message.answer(confirmation_text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebApp: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
@dp.message(Command("appointments"))
async def cmd_appointments(message: types.Message):
    fake_callback = types.CallbackQuery(
        id="fake",
        from_user=message.from_user,
        chat_instance="fake",
        message=message,
        data="my_appointments"
    )
    await show_appointments(fake_callback)


async def send_pending_message_to_admin(admin_text, appointment_id):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard_buttons = [
        [
            InlineKeyboardButton(
                text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"cancel_admin_{appointment_id}"
            ),
            InlineKeyboardButton(
                text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve_{appointment_id}"
            )
        ]
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    try:
        await bot.send_message(
            chat_id=admin_chat_id,
            text=admin_text,
            reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


async def send_message_to_admin(admin_text):  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(admin_chat_id, admin_text)
    except Exception as e:
        logger.error(e)

async def send_message_to(user_id, text):
    try:
        await bot.send_message(user_id, text)
    except Exception as e:
        logger.error(e)

# Webhook handler
async def webhook_handler(request):
    try:
        bot_instance = request.app["bot"]
        update = types.Update.model_validate(await request.json(), strict=False)
        await dp.feed_update(bot_instance, update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(status=500)


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await dp.start_polling(bot)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
