import json
import asyncio

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton

from bot_logger import logger
from config import load_config
from database.db import book_appointment, create_db_connection

DB_CONFIG = {
    "user": load_config("db_user"),
    "password": load_config("db_password"),
    "database": load_config("db_name"),
    "host": load_config("db_host"),
    "port": load_config("db_port")
}
TOKEN = load_config("token")

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()



@dp.message(CommandStart())
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", web_app=WebAppInfo(url="https://s975786.ha003.t.mydomain.zone"))]
            # [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", web_app=WebAppInfo(url="https://tg-form.webnode.page/"))]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"–∑–∞–ø–∏—Å–∞—Ç—å—Å—è: ", reply_markup=keyboard
    )

@dp.message(F.web_app_data)
async def handle_any_message(message: types.Message):
    pool = dp["db_pool"]
    if message.web_app_data is None:
        await message.answer("web_app_data is empty")
        return
    if message.web_app_data:
        print(message.web_app_data.data)
        try:
            data = json.loads(message.web_app_data.data)

            service = data["service"]
            date = data["date"]
            time = data["time"]
            user_name = message.from_user.first_name
            user_id = message.from_user.id
            print(f"user_data: {service}, {date},{time},{user_name},{user_id}")

            if service and date and time:
                try:
                    booked = await book_appointment(pool,service,date,time,user_name,user_id)
                    if booked:
                        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n–£—Å–ª—É–≥–∞: {service}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}")
                    else:
                        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                except asyncpg.DataError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}" )

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ WebApp —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("üëã –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –¥–ª—è –∑–∞–ø–∏—Å–∏.")


async def main():
    pool = await create_db_connection()
    dp["db_pool"] = pool
    await bot.delete_webhook(drop_pending_updates=True)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())