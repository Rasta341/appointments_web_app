# .github/workflows/ci-cd.yml
name: Docker Image CI
on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  API_IMAGE: ghcr.io/${{ github.repository }}/nail_salon_api
  BOT_IMAGE: ghcr.io/${{ github.repository }}/nail_salon_bot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.API_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Bot
      id: meta-bot
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BOT_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api  # путь к директории с API
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha,scope=api
        cache-to: type=gha,mode=max,scope=api

    - name: Build and push Bot image
      uses: docker/build-push-action@v5
      with:
        context: ./  # путь к директории с ботом
        push: true
        tags: ${{ steps.meta-bot.outputs.tags }}
        labels: ${{ steps.meta-bot.outputs.labels }}
        cache-from: type=gha,scope=bot
        cache-to: type=gha,mode=max,scope=bot

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Переходим в директорию проекта
          cd appointments_web_app/
          
          # Обновляем код
          git pull origin main
          
          # Логинимся в GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Останавливаем старые контейнеры
          docker-compose down
          
          # Подтягиваем новые образы (только для API и Bot)
          docker pull ${{ env.API_IMAGE }}:latest
          docker pull ${{ env.BOT_IMAGE }}:latest
          
          # Запускаем с продакшен конфигурацией
          docker-compose up -d
          
          # Проверяем статус
          docker-compose ps
          
          # Очистка неиспользуемых образов
          docker image prune -f
