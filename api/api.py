from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, field_validator, Field
from datetime import date, time, datetime
from typing import List
import sys
import os
import json

from config import load_config
from bot.bot import send_message_to_admin, send_pending_message_to_admin
from bot import bot
from database import db
from database.db import reminder_repo, user_repo, appointment_repo
from notifier.reminder import ReminderScheduler
from logger.bot_logger import get_logger

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

logger = get_logger("api")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SERVICE_NAMES = json.loads(load_config("service_names"))
user_repo = user_repo
appointment_repo = appointment_repo
reminder_repo = reminder_repo

reminder = ReminderScheduler(bot, reminder_repo, user_repo, appointment_repo)


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await db.init_database()
    await reminder.start()
    logger.info("API started successfully")
    yield
    # Shutdown
    await db.close_database()
    await reminder.stop()
    logger.info("API shutdown completed")


app = FastAPI(
    title="Nail Salon API",
    lifespan=lifespan,
    docs_url=None,
    redoc_url=None,
    openapi_url=None,
    description="Internal API for Telegram bot appointment system"
)

# CORS –¥–ª—è Telegram WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://manicure-appointments.shop",
        "http://manicure-appointments.shop",
        "https://www.manicure-appointments.shop",
        "http://www.manicure-appointments.shop",
        "https://web.telegram.org",
        "http://web.telegram.org",
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "DELETE", "OPTIONS"],
    allow_headers=["*"],  # Telegram WebApp –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Appointment(BaseModel):
    telegram_id: int = Field(gt=0, description="Telegram user ID")
    service_type: str = Field(description="Type of service")
    appointment_date: date = Field(description="Date of appointment")
    appointment_time: time = Field(description="Time of appointment")

    @field_validator('service_type')
    def validate_service_type(cls, v):
        allowed_services = list(SERVICE_NAMES.keys())  # –ë–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if v not in allowed_services:
            raise ValueError(f'Service type must be one of: {allowed_services}')
        return v

    @field_validator('appointment_date')
    def validate_appointment_date(cls, v):
        if v < date.today():
            raise ValueError('appointment_date cannot be in the past')
        return v

    @field_validator('appointment_time')
    def validate_appointment_time(cls, v):
        allowed_times = [time(10, 0), time(12, 0), time(14, 0), time(16, 0), time(18, 0)]
        if v not in allowed_times:
            raise ValueError(f'Appointment time must be one of: {[t.strftime("%H:%M") for t in allowed_times]}')
        return v


class AppointmentResponse(BaseModel):
    id: int
    service_type: str
    appointment_date: date
    appointment_time: time
    status: str


class BookedSlotsResponse(BaseModel):
    date: str
    booked_times: List[str]


class CancelAppointmentRequest(BaseModel):
    telegram_id: int = Field(gt=0, description="Telegram ID of the user who owns the appointment")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def mask_user_id(telegram_id: int) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ–º telegram_id –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return f"***{str(telegram_id)[-3:]}"


def safe_get_user_info(user_data: dict) -> tuple[str, str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = user_data.get('username', '').replace('@', '') if user_data.get('username') else '–Ω–µ —É–∫–∞–∑–∞–Ω'
    first_name = user_data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    return username, first_name


# API Endpoints
@app.get("/booked-slots")
async def get_booked_slots():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        booked_slots = await db.appointment_repo.get_booked_slots()
        return booked_slots
    except Exception as e:
        logger.error(f"Error getting booked slots: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã")


@app.get("/available-slots/{raw_date}")
async def get_available_slots(raw_date: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        target_date = datetime.strptime(raw_date, "%Y-%m-%d").date()

        if target_date < date.today():
            raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É")

        result = await db.appointment_repo.get_available_slots(target_date)
        return result
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
    except Exception as e:
        logger.error(f"Error getting available slots for date {raw_date}: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã")


@app.post("/appointments")
async def create_appointment(appointment: Appointment):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        is_available = await db.appointment_repo.is_slot_available(
            appointment.appointment_date,
            appointment.appointment_time
        )

        if not is_available:
            raise HTTPException(status_code=400, detail="–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        appointment_id = await db.appointment_repo.create_appointment(
            appointment.telegram_id,
            appointment.service_type,
            appointment.appointment_date,
            appointment.appointment_time
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            client = await user_repo.get_user(appointment.telegram_id)
            username, first_name = safe_get_user_info(client)

            text_to_admin = (
                f"üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({first_name})\n"
                f"–£—Å–ª—É–≥–∞: {SERVICE_NAMES.get(appointment.service_type, appointment.service_type)}\n"
                f"–î–∞—Ç–∞: {appointment.appointment_date}\n"
                f"–í—Ä–µ–º—è: {appointment.appointment_time}"
            )

            await send_pending_message_to_admin(text_to_admin, appointment_id)
            await reminder_repo.create_reminder(
                appointment.telegram_id,
                appointment.appointment_date,
                appointment.appointment_time
            )
        except Exception as e:
            logger.error(f"Error sending notification for appointment {appointment_id}: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(
            f"Appointment created: ID={appointment_id}, user={mask_user_id(appointment.telegram_id)}, service={appointment.service_type}")

        return {
            "success": True,
            "appointment_id": appointment_id,
            "message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creating appointment for user {mask_user_id(appointment.telegram_id)}: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")


@app.get("/appointments/{telegram_id}")
async def get_user_appointments(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        appointments = await db.appointment_repo.get_user_appointments(telegram_id)
        return appointments
    except Exception as e:
        logger.error(f"Error getting appointments for user {mask_user_id(telegram_id)}: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏")


@app.delete("/appointments/{appointment_id}")
async def cancel_appointment(appointment_id: int, cancel_request: CancelAppointmentRequest):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        appointment = await db.appointment_repo.get_appointment_by_id(appointment_id)
        if not appointment:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if appointment['telegram_id'] != cancel_request.telegram_id:
            logger.warning(
                f"Unauthorized cancellation attempt: appointment {appointment_id} by user {mask_user_id(cancel_request.telegram_id)}")
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏")

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        success = await db.appointment_repo.cancel_appointment(appointment_id, cancel_request.telegram_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            client = await user_repo.get_user(appointment['telegram_id'])
            username, first_name = safe_get_user_info(client)

            text_to_admin = (
                f"üö´ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({first_name})\n"
                f"–£—Å–ª—É–≥–∞: {SERVICE_NAMES.get(appointment['service_type'], appointment['service_type'])}\n"
                f"–î–∞—Ç–∞: {appointment['appointment_date']}\n"
                f"–í—Ä–µ–º—è: {appointment['appointment_time']}"
            )

            await reminder_repo.cancel_reminders_for_appointment(
                appointment['telegram_id'],
                appointment['appointment_date']
            )
            await send_message_to_admin(text_to_admin)
        except Exception as e:
            logger.error(f"Error sending cancellation notification for appointment {appointment_id}: {e}")

        logger.info(f"Appointment {appointment_id} cancelled by user {mask_user_id(cancel_request.telegram_id)}")
        return {"success": True, "message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞"}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error cancelling appointment {appointment_id}: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")


@app.post("/webapp-data")
async def process_webapp_data(data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram WebApp"""
    try:
        logger.info(f"WebApp data received with keys: {list(data.keys()) if data else 'empty'}")
        return {
            "success": True,
            "message": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Error processing webapp data: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        await db.appointment_repo.get_booked_slots()
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "database": "connected"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unhealthy")


if __name__ == "__main__":
    import uvicorn

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    host = load_config('api_host') or "0.0.0.0"
    port = load_config('api_port') or 8088

    uvicorn.run(app, host=host, port=port)