import asyncio
import datetime

from config import load_config
from database.db import ReminderRecord
from logger.bot_logger import get_logger

logger = get_logger("reminder_scheduler")



class ReminderScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î"""

    def __init__(self, bot, reminder_repo, user_repo, appointment_repo, check_interval: int = 300):
        """
        Args:
            bot: Telegram bot instance
            reminder_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            user_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            appointment_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–ø–∏—Å–µ–π
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.bot = bot
        self.reminder_repo = reminder_repo
        self.user_repo = user_repo
        self.appointment_repo = appointment_repo
        self.check_interval = check_interval
        self.running = False
        self._task = None
        self._last_cleanup = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.running = True
        self._task = asyncio.create_task(self._scheduler_loop())
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval}—Å)")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                await self._check_and_send_reminders()
                now = datetime.datetime.now()
                if self._last_cleanup is None or (now - self._last_cleanup).days >= 1:
                    await self._cleanup_cancelled_appointments()
                    self._last_cleanup = now
                await asyncio.sleep(self.check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _cleanup_cancelled_appointments(self):
        interval = load_config('CLEANUP_INTERVAL')
        await self.appointment_repo.remove_appointment(interval=interval)

    async def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        current_time = datetime.datetime.now()
        reminders = await self.reminder_repo.get_pending_reminders(current_time)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

        if not reminders:
            return

        for reminder in reminders:
            await self._process_reminder(reminder)

    async def _process_reminder(self, reminder: ReminderRecord):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            appointment_exists = await self.appointment_repo.check_appointment_exists(
                telegram_id=reminder.telegram_id,
                appointment_date=reminder.appointment_date
            )

            if not appointment_exists:
                logger.info(f"–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {reminder.telegram_id}")
                await self.reminder_repo.mark_reminder_sent(reminder.id)  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            message = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ {reminder.appointment_date} "
                f"–≤ {reminder.appointment_time}."
            )

            await self.bot.send_message_to(reminder.telegram_id, message)
            await self.reminder_repo.mark_reminder_sent(reminder.id)

            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reminder.telegram_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder.id}: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def schedule_appointment_reminder(telegram_id: int, appointment_date: datetime.date,
                                        appointment_time: datetime.time, reminder_repo):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    return await reminder_repo.create_reminder(telegram_id, appointment_date, appointment_time)


async def cancel_appointment_reminders(telegram_id: int, appointment_date: datetime.date,
                                       reminder_repo):
    """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
    return await reminder_repo.cancel_reminders_for_appointment(telegram_id, appointment_date)